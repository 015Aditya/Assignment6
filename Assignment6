{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a0da5d21-964b-4257-9f54-35d421a70a2c",
   "metadata": {},
   "source": [
    "Questions1 -> Explain Class and Object with respect to Object-Oriented Programming. Give a suitable example. \n",
    "\n",
    "Solution ->  A class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and                          functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class                  instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by their class) for              modifying their state.\n",
    "             To understand the need for creating a class in Python let’s consider an example, let’s say you wanted to track the number of dogs that                may have different attributes like breed, and age. If a list is used, the first element could be the dog’s breed while the second element              could represent its age. Let’s suppose there are 100 different dogs, then how would you know which element is supposed to be which? What              if you wanted to add other properties to these dogs? This lacks organization and it’s the exact need for classes.\n",
    "             \n",
    "Example ->  \n",
    "class Person:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "    def say_hi(self):\n",
    "        print('Hello, my name is', self.name)\n",
    "p = Person('Aditya  Rajput ')\n",
    "p.say_hi()\n",
    "\n",
    "\n",
    "\n",
    "Questions2 -> Name the four pillars of OOPs.\n",
    "\n",
    "Solution -> The four pillars of object-oriented programming are:\n",
    "\n",
    "(1).Abstraction\n",
    "(2).Encapsulation\n",
    "(3).Inheritance\n",
    "(4).Polymorphism\n",
    "\n",
    "\n",
    "Question3 -> Explain why the __init__() function is used. Give a suitable example.\n",
    "\n",
    "Solution -> The examples above are classes and objects in their simplest form, and are not really useful in real life applications.\n",
    "            To understand the meaning of classes we have to understand the built-in __init__() function.\n",
    "            All classes have a function called __init__(), which is always executed when the class is being initiated.\n",
    "            Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being               created:\n",
    "            \n",
    "Example -> \n",
    "class Person:\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "\n",
    "p1 = Person(\"Aditya \", 19)\n",
    "\n",
    "print(p1.name)\n",
    "print(p1.age)\n",
    "\n",
    "\n",
    "Question4 -> Why self is used in OOPs?\n",
    "\n",
    "Solution -> self represents the instance of the class. By using the “self”  we can access the attributes and methods of the class in python. It binds             the attributes with the given arguments.\n",
    "            The reason you need to use self. is because Python does not use the @ syntax to refer to instance attributes. Python decided to do methods             in a way that makes the instance to which the method belongs be passed automatically, but not received automatically: the first parameter             of methods is the instance the method is called on.\n",
    "            \n",
    "            \n",
    "Question5 -> What is inheritance? Give an example for each type of inheritance.\n",
    "\n",
    "Solution -> Like any other OOP languages, Python also supports the concept of class inheritance.\n",
    "            Inheritance allows us to create a new class from an existing class.\n",
    "            The new class that is created is known as subclass (child or derived class) and the existing class from which the child class is derived               is known as superclass (parent or base class).\n",
    "            \n",
    "Example ->   "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
